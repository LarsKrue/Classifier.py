"""
Created on Wed May 27 22:43:51 2020

Inference of own (single) img-images on pretrained ResNet with adapated final layer (classificator)


@author: Lars Kr√ºger
"""


import matplotlib.pyplot as plt
import torch as tr

from torch import nn
from torchvision import transforms, models
from collections import OrderedDict
from skimage import io
from PIL import Image

#-----------------------------Load Network Model------------------------------
my_network = models.resnet50(pretrained=True) # pretrained model

#-- ensure compatibility with specifically created new classifier 
# Design of new Classifer Network
input_units = 2048 # as the original classifier / final layer
hidden_units = [500] # only one hidden layer
output_units = 2 # new configuration


classifier = nn.Sequential(OrderedDict([
                          ("Layer 1", nn.Linear(input_units, hidden_units[0])),
                          ("ReLu", nn.ReLU()),
                          ("Layer 2", nn.Linear(hidden_units[0], output_units)),
                          ("Output", nn.LogSoftmax(dim=1))
                          ]))

#Assignment of new classifier structure to network, but yet untrained
my_network.fc = classifier

# Load trained classifier
state_dict = tr.load("configuration_trained_Network.pth")
my_network.load_state_dict(state_dict)
print(my_network)

#--------------------------image preprocessing--------------------------------
file_name ="bella.jpg"

test_image = io.imread(file_name)
#test_image = test_image[250:850, 250:650] # manual center crop
plt.imshow(test_image) # all channels, real image
plt.title("Belli!")
print(test_image.size)
print(test_image.shape) #3 channel image, RGB

size = 250
crop = 224
single_transform = transforms.Compose([transforms.Resize((size, size)),# returns PIL image
                                       transforms.CenterCrop(crop),
                                       transforms.ToTensor(), # returns tensor
                                       transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225]), # expects tensor                                
                                       ])
img = Image.open(file_name)
#img = img.crop((250,300,600,800))
img = single_transform(img)
img = img.unsqueeze(0)
#--------------------------Inference--------------------------------------------


with tr.no_grad(): # no gradient calculation
    logps = my_network.forward(img)
    
print("Logps", logps)

#-----------------------------Plot--------------------------------------------
ps = tr.exp(logps)
print("ps after Exp", ps[0])

ps = ps[0].tolist()
print("ps list", ps)
fig, (ax1, ax2) = plt.subplots(figsize=(6,9), ncols=2)
ax1.imshow(img.resize_(1, 224, 224).numpy().squeeze())
ax1.axis('off')
ax2.barh(["Cat", "Dog"],ps)
ax2.set_aspect(0.1)
ax2.set_yticklabels(["Cat", "Dog"])
ax2.set_title('Class Probability')
